<?xml version="1.0" encoding="UTF-8" ?>

<project name="FunCheck" default="dist" basedir=".">
    <description>
        Build file for the compiler plugin of the FunCheck project.
    </description>

    <!-- The settings can be overridden in local.properties. -->
    <property environment="env" />
    <property name="scala.home" value="${env.SCALA_HOME}" />
    <property name="scala-library.jar" value="${scala.home}/lib/scala-library.jar" />
    <property name="scala-compiler.jar" value="${scala.home}/lib/scala-compiler.jar" />

    <!-- paths -->
    <property name="base.dir" value="${basedir}" /> 
    <property name="sources.dir" value="${base.dir}/src" />
    <property name="examples.dir" value="${base.dir}/examples" />
    <!-- <property name="tests.dir" value="${base.dir}/tests" /> -->
    <property name="dist.dir" value="${base.dir}/dist" />
    <property name="lib.dir" value="${basedir}/lib" /> 
    <property name="build.dir" value="${base.dir}/bin" />

    <property name="build.plugin.funcheck.dir" value="${build.dir}/plugin" />
    <property name="build.funcheck.lib.dir" value="${build.dir}/lib" />
    <!-- <property name="build.scala.lib.extension.dir" value="${build.dir}/scala" /> -->
    <!-- <property name="build.examples.dir" value="${build.dir}/examples" /> -->
    <!-- <property name="build.tests.dir" value="${build.dir}/tests" /> -->


    <!-- other properties -->
    <property name="dist.jar" value="${dist.dir}/funcheck-plugin.jar" />
    <property name="main.class" value="funcheck.DefaultMain" />
    <property name="script.file" value="${base.dir}/scalac-funcheck" />
    <property name="scalac.default.params" value="-deprecation -unchecked" />
    <property name="scalac.funcheck.plugin" value="-Xplugin:${dist.jar} ${scalac.default.params}"/> 

    <!-- required to use the tasks scalac, fsc and scaladoc -->
    <taskdef resource="scala/tools/ant/antlib.xml">
        <classpath>
            <pathelement location="${scala-compiler.jar}"  />
            <pathelement location="${scala-library.jar}"  />
        </classpath>
    </taskdef>

    <!-- classpath definitions -->
    <path id="scalac.class.path">
        <pathelement location="${scala-library.jar}"  />
        <pathelement location="${scala-compiler.jar}"  />
    </path>

    <path id="funcheck.lib.path">
        <pathelement location="${build.funcheck.lib.dir}"/>
    </path>

    <!--
    <path id="scala.lib.extension.path">
        <pathelement location="${build.scala.lib.extension.dir}"/>
    </path>
    -->

    <path id="build.path">
        <path refid="scalac.class.path"/>
        <path refid="funcheck.lib.path"/>
        <pathelement location="${build.plugin.funcheck.dir}"  />
    </path>

    <!--
    <path id="scalacheck.lib.path">
        <pathelement location="${lib.dir}/ScalaCheck-1.5.jar"/>
    </path>
    -->

    <!--
    <path id="test.lib.path">
        <path refid="scalacheck.lib.path"/>
        <pathelement location="${lib.dir}/scalatest-0.9.5.jar" />
        <pathelement location="${lib.dir}/specs-1.5.0.jar" />
    </path>
    -->

    <!-- phases definitions -->
    <!-- <target name="compile-funcheck-lib" description="compile the FunCheck library (used for specification)">
        <mkdir dir="${build.funcheck.lib.dir}"  />
        <scalac srcdir="${sources.dir}" destdir="${build.funcheck.lib.dir}" force="changed" addparams="${scalac.default.params}">
            <classpath>
                <path refid="scalac.class.path" />
            </classpath>
            <include name="funcheck/lib/**/*.scala"  />
        </scalac>
    </target>
    -->

    <!--
    <target name="compile-scalac-lib-extension" description="compile Scala library extension for immutable Multiset">
        <mkdir dir="${build.scala.lib.extension.dir}"  />
        <scalac srcdir="${sources.dir}" destdir="${build.scala.lib.extension.dir}" force="changed" addparams="${scalac.default.params}">
            <classpath refid="scalac.class.path" />
            <include name="scala/collection/**/*.scala"  />
        </scalac>
    </target>
    -->

    <!-- <target name="compile" depends="compile-funcheck-lib" description="compile the FunCheck plugin"> -->
    <target name="compile" description="compile the FunCheck plugin">
        <mkdir dir="${build.plugin.funcheck.dir}"  />
        <scalac srcdir="${sources.dir}" destdir="${build.plugin.funcheck.dir}" force="changed" addparams="${scalac.default.params}">
            <classpath>
                <path refid="scalac.class.path" />
            </classpath>
            <exclude name="scala/collection/**/*"/>
            <exclude name="funcheck/lib/**/*"/>
            <exclude name="funcheck/scalacheck/**/*" />
        </scalac>
    </target>


    <target name="dist" depends="compile" description="build the FunCheck jar file and create the script file used to run scalac with FunCheck plugged-in">
        <mkdir dir="${dist.dir}" />

        <manifest file="${dist.dir}/MANIFEST.MF">
            <attribute name="Built-By" value="lara.epfl.ch" />
            <attribute name="Main-Class" value="${main.class}" />
        </manifest>

        <jar destfile="${dist.jar}" manifest="${dist.dir}/MANIFEST.MF">
            <fileset dir="${build.plugin.funcheck.dir}" />
            <fileset file="./scalac-plugin.xml" />
        </jar>

        <echo file="${script.file}" message="#!/bin/sh${line.separator}scalac -Xplugin:${dist.jar} $@${line.separator}" />
        <chmod file="${script.file}" perm="u+x" />
    </target>

    <!--
    <target name="compile-examples" depends="dist" description="compile the examples">
        <mkdir dir="${build.examples.dir}" />    	
        <scalac srcdir="${examples.dir}" destdir="${build.examples.dir}" force="changed" 
            addparams="${scalac.default.params}">
            < ! - - addparams="${scalac.funcheck.plugin}" crashes for some unknown reason - - >
            <classpath>
                <path refid="scalac.class.path" />
                <path refid="scala.lib.extension.path" />
                <path refid="funcheck.lib.path" />
                <path refid="scalacheck.lib.path" />
            </classpath>
        </scalac>
    </target>

    <target name="compile-all" depends="compile-tests" description="compile FunCheck, create a distribution file, compile examples and tests" />

    <target name="compile-tests" depends="compile-examples" description="compile the tests suite">
        <mkdir dir="${build.tests.dir}"  />
        <scalac srcdir="${tests.dir}" destdir="${build.tests.dir}" force="changed" addparams="${scalac.default.params}">
            <classpath>
                <path refid="scala.lib.extension.path" />
                <path refid="test.lib.path" />
                <path refid="build.path" />
                <pathelement location="${build.examples.dir}"/>
            </classpath>
        </scalac>
    </target>

    <target name="run-test" depends="compile-tests"
        description="run a test (test name is provided by the user)">
        <input message="Please enter the name of the test you want to run
            (e.g., package_name.ClassName)"
            addproperty="test.name"
            />

        <echo message="- - running test ${test.name}."/>
        <java classname="scala.tools.nsc.MainGenericRunner" fork="true">
            <classpath>
                <path refid="scala.lib.extension.path" />
                <path refid="test.lib.path" />
                <path refid="build.path" />
                <pathelement location="${build.examples.dir}"/>
                <pathelement location="${build.tests.dir}"/>
            </classpath>
            <arg line="${test.name}" />
        </java>
    </target>
    -->

    <target name="clean" description="clean the project space">
        <delete file="${script.file}" quiet="yes" failonerror="no" />
        <delete dir="${build.dir}" includeemptydirs="yes" quiet="yes" failonerror="no" />
        <delete dir="${dist.dir}" includeemptydirs="yes" quiet="yes" failonerror="no" />
        <delete>
            <fileset dir="${basedir}" includes="**/*.class" />
        </delete>
    </target>

    <target name="new" description="clean and rebuilds" depends="clean, dist" />
</project>
