<?xml version="1.0" encoding="UTF-8" ?>

<project name="FunCheck" default="dist" basedir=".">
    <description>
        Build file for the compiler plugin of the FunCheck project.
    </description>

    <!-- The settings can be overridden in local.properties. -->
    <property environment="env" />
    <property name="scala.home" value="${env.SCALA_HOME}" />
    <property name="scala-library.jar" value="${scala.home}/lib/scala-library.jar" />
    <property name="scala-compiler.jar" value="${scala.home}/lib/scala-compiler.jar" />

    <!-- paths -->
    <property name="base.dir" value="${basedir}" /> 
    <property name="sources.dir" value="${base.dir}/src" />
    <property name="examples.dir" value="${base.dir}/examples" />
    <property name="tests.dir" value="${base.dir}/tests" />
    <property name="build.dir" value="${base.dir}/bin" />
    <property name="dist.dir" value="${base.dir}/dist" />

    <property name="lib.dir" value="${basedir}/lib" /> 

    <property name="build.examples.dir" value="${build.dir}/examples" />
    <property name="build.tests.dir" value="${build.dir}/tests" />

    <!-- other properties -->
    <property name="dist.jar" value="${dist.dir}/funcheck-plugin.jar" />
    <property name="main.class" value="funcheck.DefaultMain" />
    <property name="script.file" value="${base.dir}/scalac-funcheck" />
    <property name="scalac.default.params" value="-deprecation -unchecked" />

    <!-- required to use the tasks scalac, fsc and scaladoc -->
    <taskdef resource="scala/tools/ant/antlib.xml">
        <classpath>
            <pathelement location="${scala-compiler.jar}"  />
            <pathelement location="${scala-library.jar}"  />
        </classpath>
    </taskdef>

    <!-- classpath definitions -->
    <path id="scalac.class.path">
        <pathelement location="${scala-library.jar}"  />
        <pathelement location="${scala-compiler.jar}"  />
    </path>

    <path id="build.path">
        <path refid="scalac.class.path"/>
        <pathelement location="${build.dir}"  />
    </path>

    <!-- generic classpath settings (collecting all) -->
    <path id="lib.path">
	    <pathelement location="${lib.dir}/ScalaCheck-1.5.jar"/>
        <pathelement location="${lib.dir}/scalatest-0.9.5.jar" />
        <pathelement location="${lib.dir}/specs-1.5.0.jar" />
       
        <!-- why the jars are not taken automatically from the lib .. ??? 
        <fileset dir=".">
            <include name="${lib.dir}/*.jar"/>
        </fileset>
        <fileset dir=".">
            <include name="${lib.dir}/*.zip"/>
        </fileset-->
    </path>


	<target name="compile" description="compile the FunCheck plugin">
        <mkdir dir="${build.dir}"  />
        <scalac srcdir="${sources.dir}" destdir="${build.dir}" force="changed" addparams="${scalac.default.params}">
            <classpath>
			  <path refid="build.path" />
            </classpath>
			<include name="**/*.scala"  />
            <exclude name="scala/collection/**/*.scala"/>
        </scalac>
    </target>

    <target name="compile-lib-extension" description="compile Scala library extension for MultiSet">
        <mkdir dir="${build.dir}"  />
        <scalac srcdir="${sources.dir}" destdir="${build.dir}" force="changed" addparams="${scalac.default.params}">
            <classpath refid="build.path" />
            <include name="scala/collection/**/*.scala"  />
        </scalac>
    </target>

    <target name="compile-examples" depends="compile, compile-lib-extension" description="compile the examples">
        <mkdir dir="${build.examples.dir}"  />
        <scalac srcdir="${examples.dir}" destdir="${build.examples.dir}" force="changed" addparams="${scalac.default.params}">
            <classpath>
                <path refid="scalac.class.path" />
                <!-- To be precise, in the classpatht we should have the 
					 funcheck/lib and the scala multiset library --> 
				<path refid="build.path"/>
            </classpath>
        </scalac>
    </target>

    <target name="compile-all" depends="compile,compile-examples" description="compile FunCheck and the examples" />

    <target name="compile-tests-examples" depends="compile-examples" description="compile the suite tests for the examples">
        <mkdir dir="${build.tests.dir}"  />
        <scalac srcdir="${tests.dir}" destdir="${build.tests.dir}" force="changed" addparams="${scalac.default.params}">
            <classpath>
                <path refid="scalac.class.path" />
                <path refid="lib.path" />
                <path refid="build.path" />
                <pathelement location="${build.examples.dir}"/>
            </classpath>
        </scalac>
    </target>

    <target name="run-test" depends="compile-tests-examples"
	          description="run a test (test name is provided by the user)">
          <input message="Please enter the name of the test you want to run
		  (e.g., package_name.ClassName)"
			      addproperty="test.name"
				    />
		  
          <echo message="--- running test ${test.name}."/>
          <java classname="scala.tools.nsc.MainGenericRunner" fork="true">
		     <classpath>
			    <path refid="scalac.class.path" />
				<path refid="lib.path" />
                <path refid="build.path" />
                <pathelement location="${build.examples.dir}"/>
                <pathelement location="${build.tests.dir}"/>
			 </classpath>
			 <arg line="${test.name}" />
		  </java>
    </target>


    <target name="dist" depends="compile" description="build the FunCheck jar file and create the script file used to run scalac with FunCheck plugged-in">
        <mkdir dir="${dist.dir}" />

        <manifest file="${dist.dir}/MANIFEST.MF">
            <attribute name="Built-By" value="lara.epfl.ch" />
            <attribute name="Main-Class" value="${main.class}" />
        </manifest>

        <jar destfile="${dist.jar}" manifest="${dist.dir}/MANIFEST.MF">
            <fileset dir="${build.dir}" />
            <fileset file="./scalac-plugin.xml" />
        </jar>

        <echo file="${script.file}" message="#!/bin/sh${line.separator}scalac -Xplugin:${dist.jar} $@${line.separator}" />
        <chmod file="${script.file}" perm="u+x" />
    </target>

    <target name="clean" description="clean the project space">
        <delete file="${script.file}" quiet="yes" failonerror="no" />
        <delete dir="${build.dir}" includeemptydirs="yes" quiet="yes" failonerror="no" />
        <delete dir="${dist.dir}" includeemptydirs="yes" quiet="yes" failonerror="no" />
        <delete>
            <fileset dir="${basedir}" includes="**/*.class" />
        </delete>
    </target>

    <target name="new" description="clean and rebuilds" depends="clean, dist" />
</project>
