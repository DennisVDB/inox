(declare-datatypes (T!3) ((List!4 (Nil!1) (Cons!1 (h!46 T!3) (t!53 (List!4 T!3))))))

(define-fun-rec (par (T!36) (content!2 ((thiss!20 (List!4 T!36))) (Set T!36) (ite (is-Nil!1 thiss!20) (as emptyset T!36) (ite (is-Cons!1 thiss!20) (union (insert (as emptyset T!36) (h!46 thiss!20)) (content!2 (t!53 thiss!20))) (choose |error: Match is non-exhaustive!16| (Set T!36) true))))))

(define-fun-rec (par (T!46) (contains!0 ((thiss!37 (List!4 T!46)) (v!3 T!46)) Bool (let ((x$2!1 (ite (is-Cons!1 thiss!37) (or (= (h!46 thiss!37) v!3) (contains!0 (t!53 thiss!37) v!3)) (ite (is-Nil!1 thiss!37) false (choose |error: Match is non-exhaustive!26| Bool true))))) (assume (= x$2!1 (member v!3 (content!2 thiss!37))) x$2!1)))))

(declare-const (par (A!1) (l!0 (List!4 A!1))))

(declare-datatypes (A1!0 R!21) ((fun1!41 (fun1!42 (f!61 (=> A1!0 R!21)) (pre!31 (=> A1!0 Bool))))))

(declare-datatypes (A!0 B!0) ((~>!17 (~>!18 (f!64 (fun1!41 A!0 B!0)) (ens!9 (fun1!41 B!0 Bool))))))

(define-fun (par (A!50 B!36) (pre!0 ((thiss!102 (~>!17 A!50 B!36))) (fun1!41 A!50 Bool) (fun1!42 (pre!31 (f!64 thiss!102)) (lambda ((x!311 A!50)) true)))))

(declare-const (par (A!1 B!1) (f!1 (~>!17 A!1 B!1))))

(datatype-invariant (par (A!43 B!31) thiss!63 (~>!17 A!43 B!31) (and (forall ((x!0 B!31)) (@ (f!61 (fun1!42 (pre!31 (ens!9 thiss!63)) (lambda ((x!255 B!31)) true))) x!0)) (forall ((x!1 A!43)) (=> (@ (f!61 (fun1!42 (pre!31 (f!64 thiss!63)) (lambda ((x!256 A!43)) true))) x!1) (@ (f!61 (ens!9 thiss!63)) (@ (f!61 (f!64 thiss!63)) x!1)))))))

(assert (par (A!1 B!1) (not (=> (and (forall ((x!4 A!1)) (=> (contains!0 (as l!0 (List!4 A!1)) x!4) (@ (f!61 (pre!0 (as f!1 (~>!17 A!1 B!1)))) x!4))) (is-Cons!1 (as l!0 (List!4 A!1)))) (@ (f!61 (fun1!42 (pre!31 (f!64 (as f!1 (~>!17 A!1 B!1)))) (lambda ((x!375 A!1)) true))) (h!46 (as l!0 (List!4 A!1))))))))

(check-sat)

; check-assumptions required here, but not part of tip standard