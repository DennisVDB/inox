/* Copyright 2009-2016 EPFL, Lausanne */

package inox
package grammars

trait ConstantGrammars { self: GrammarsUniverse =>
  import program._
  import trees._
  import exprOps.collect

  /** Generates constants found in an [[inox.ast.Expressions.Expr]].
    * Some constants that are generated by other grammars (like 0, 1) will be excluded
    */
  case class Constants(e: Expr) extends SimpleExpressionGrammar {

    private val excluded: Set[Expr] = Set(
      IntegerLiteral(1),
      IntegerLiteral(0),
      IntLiteral(1),
      IntLiteral(0),
      BooleanLiteral(true),
      BooleanLiteral(false)
    )

    def computeProductions(t: Type)(implicit ctx: InoxContext): Seq[Prod] = {
      val literals = collect[Expr]{
        case IsTyped(l:Literal[_], `t`) => Set(l)
        case _ => Set()
      }(e)

      (literals -- excluded map (terminal(_, Constant))).toSeq
    }
  }
}
